CREATE DATABASE SchoolDB;

CREATE TABLE Students (
    StudentID INT PRIMARY KEY,
    Name VARCHAR(50),
    Age INT,
    Grade VARCHAR(5)
);

INSERT INTO Students (StudentID, Name, Age, Grade)
VALUES 
(1, 'Sarath', 14, 'B'),
(2, 'Chandu', 16, 'A'),
(3, 'Kishore', 15, 'C'),
(4, 'Ganesh', 17, 'B'),
(5, 'Pavan', 18, 'A'),
(6, 'Naveen', 17, 'A');

SELECT * FROM Students
WHERE Age > 15;

UPDATE Students
SET Grade = 'A'
WHERE StudentID = 3;
SELECT * FROM Students

DELETE FROM Students
WHERE StudentID = 5;
SELECT * FROM Students

CREATE TABLE Courses (
    CourseID INT PRIMARY KEY,
    CourseName VARCHAR(50),
    Instructor VARCHAR(50)
);

INSERT INTO Courses (CourseID, CourseName, Instructor)
VALUES
(1, 'Mathematics', 'DBM'),
(2, 'Physics', 'Sarkar'),
(3, 'Chemistry', 'Srivalli');

CREATE TABLE Enrollments (
    EnrollmentID INT PRIMARY KEY,
    StudentID INT,
    CourseID INT,
    FOREIGN KEY (StudentID) REFERENCES Students(StudentID),
    FOREIGN KEY (CourseID) REFERENCES Courses(CourseID)
);

INSERT INTO Enrollments (EnrollmentID, StudentID, CourseID)
VALUES
(1, 1, 1),
(2, 2, 1),  
(3, 3, 2), 
(4, 4, 3),  
(5, 1, 2),
(6, 1, 3);

SELECT s.Name
FROM Students s
JOIN Enrollments e ON s.StudentID = e.StudentID
JOIN Courses c ON e.CourseID = c.CourseID
WHERE c.CourseName = 'Mathematics';

SELECT c.CourseName, COUNT(e.StudentID) AS StudentCount
FROM Courses c
LEFT JOIN Enrollments e ON c.CourseID = e.CourseID
GROUP BY c.CourseName;

SELECT s.Name AS StudentName, c.CourseName
FROM Students s
JOIN Enrollments e ON s.StudentID = e.StudentID
JOIN Courses c ON e.CourseID = c.CourseID;

SELECT s.*
FROM Students s
LEFT JOIN Enrollments e ON s.StudentID = e.StudentID
WHERE e.StudentID IS NULL;

ALTER TABLE Students
ADD Email VARCHAR(100);

SELECT Grade, AVG(Age) AS AverageAge
FROM Students
GROUP BY Grade;

SELECT *
FROM Students
ORDER BY Name DESC;

SELECT s.Name AS StudentName, c.CourseName, c.Instructor
FROM Students s
JOIN Enrollments e ON s.StudentID = e.StudentID
JOIN Courses c ON e.CourseID = c.CourseID;

SELECT c.*
FROM Courses c
LEFT JOIN Enrollments e ON c.CourseID = e.CourseID
WHERE e.CourseID IS NULL;

CREATE INDEX idx_student_name ON Students(Name);

SELECT TOP 3*
FROM Students
ORDER BY Age ASC

CREATE TABLE Departments (
    DepartmentID INT PRIMARY KEY,
    DepartmentName VARCHAR(100)
);

INSERT INTO Departments (DepartmentID, DepartmentName) VALUES
(1, 'Science'),
(2, 'Mathematics'),
(3, 'Arts'),
(4, 'Engineering');

ALTER TABLE Courses
ADD DepartmentID INT;

INSERT INTO Courses (CourseID, CourseName, DepartmentID) VALUES
(101, 'Physics', 1),
(102, 'Chemistry', 1),
(103, 'Biology', 1),
(201, 'Algebra', 2),
(202, 'Calculus', 2),
(301, 'History', 3),
(302, 'Literature', 3),
(401, 'Computer Science', 4),
(402, 'Mechanical Engineering', 4);

ALTER TABLE Courses
ADD CONSTRAINT fk_department
FOREIGN KEY (DepartmentID) REFERENCES Departments(DepartmentID);

SELECT c.*
FROM Courses c
JOIN Departments d ON c.DepartmentID = d.DepartmentID
WHERE d.DepartmentName = 'Science';

SELECT d.DepartmentName, COUNT(c.CourseID) AS CourseCount
FROM Departments d
LEFT JOIN Courses c ON d.DepartmentID = c.DepartmentID
GROUP BY d.DepartmentName;

SELECT s.StudentID, s.Name
FROM Students s
JOIN Enrollments e ON s.StudentID = e.StudentID
GROUP BY s.StudentID, s.Name
HAVING COUNT(e.CourseID) > 2;

SELECT c.CourseID, c.CourseName, COUNT(e.StudentID) AS StudentCount
FROM Courses c
JOIN Enrollments e ON c.CourseID = e.CourseID
GROUP BY c.CourseID, c.CourseName
HAVING COUNT(e.StudentID) > 5;

DELETE FROM Students
WHERE StudentID NOT IN (
    SELECT DISTINCT StudentID
    FROM Enrollments
);
SELECT * FROM Students


1. Reverse Integer 

class Solution {
    public int reverse(int x) {
        int num = (x < 0) ? -x : x;
        long ans = 0;
        while(num > 0){
            int rem = num % 10;
            ans = ans * 10 + rem;
            num = num / 10;
        }
        if(ans > Integer.MAX_VALUE || ans < Integer.MIN_VALUE) return 0;
        return (int)((x < 0) ? -ans : ans);
    }
}

2. Longest Substring Without Repeating Characters

class Solution {
    public int lengthOfLongestSubstring(String s) {
        int n = s.length();
        int ans = 0;
        int left = 0;
        Set<Character> set = new HashSet<>();
        for(int right = 0; right < n; right++){
            char c = s.charAt(right);
            while(set.contains(c)){
                set.remove(s.charAt(left));
                left++;
            }
            set.add(c);
            ans = Math.max(ans, right - left + 1);
        }
        return ans;
    }
}

3. Longest Palindromic Substring

class Solution {
    
    private boolean isPalindrome(String str){
        int l = 0, r = str.length() - 1;
        while(l < r){
            if(str.charAt(l) != str.charAt(r)) return false;
            l++;
            r--;
        }
        return true;
    }

    public String longestPalindrome(String s) {
        int n = s.length();
        if (n <= 1) return s;
        String ans = "";
        for(int i = 0; i < n; i++){
            for(int j = i; j < n; j++){
                String sub = s.substring(i, j + 1);
                if(isPalindrome(sub) && sub.length() > ans.length()){
                    ans = sub;
                }
            }
        }
        return ans;
    }
}

4. Two Sum

class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map<Integer, Integer> map = new HashMap<>();
        for(int i = 0; i < nums.length; i++){
            int res = target - nums[i];
            if(map.containsKey(res)){
                return new int[]{map.get(res), i};
            }
            map.put(nums[i], i);
        }
        return new int[]{};
    }
}

5. Median of Two Sorted Arrays

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int n = nums1.length;
        int m = nums2.length;
        if(n > m) return findMedianSortedArrays(nums2, nums1);
        int total = n + m;
        int half = (total + 1) / 2;
        int low = 0, high = n;
        while(low <= high){
            int mid1 = (low + high) / 2;
            int mid2 = half - mid1;
            int L1 = (mid1 == 0) ? Integer.MIN_VALUE : nums1[mid1 - 1];
            int L2 = (mid2 == 0) ? Integer.MIN_VALUE : nums2[mid2 - 1];
            int R1 = (mid1 == n) ? Integer.MAX_VALUE : nums1[mid1];
            int R2 = (mid2 == m) ? Integer.MAX_VALUE : nums2[mid2];
            if(L1 <= R2 && L2 <= R1){
                if(total % 2 == 1) return Math.max(L1, L2);
                else return (Math.max(L1, L2) + Math.min(R1, R2)) / 2.0;
            }
            else if(L1 > R2) high = mid1 - 1;
            else low = mid1 + 1;
        }
        return 0;
    }
}